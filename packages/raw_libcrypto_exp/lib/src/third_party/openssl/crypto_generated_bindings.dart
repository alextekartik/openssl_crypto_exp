// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to OpenSSL libcrypto.
class OpensslCryptoBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  OpensslCryptoBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  OpensslCryptoBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int MD5_Init(
    ffi.Pointer<MD5_CTX> c,
  ) {
    return _MD5_Init(
      c,
    );
  }

  late final _MD5_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MD5_CTX>)>>(
          'MD5_Init');
  late final _MD5_Init =
      _MD5_InitPtr.asFunction<int Function(ffi.Pointer<MD5_CTX>)>();

  int MD5_Update(
    ffi.Pointer<MD5_CTX> c,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return _MD5_Update(
      c,
      data,
      len,
    );
  }

  late final _MD5_UpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MD5_CTX>, ffi.Pointer<ffi.Void>,
              size_t)>>('MD5_Update');
  late final _MD5_Update = _MD5_UpdatePtr.asFunction<
      int Function(ffi.Pointer<MD5_CTX>, ffi.Pointer<ffi.Void>, int)>();

  int MD5_Final(
    ffi.Pointer<ffi.Uint8> md,
    ffi.Pointer<MD5_CTX> c,
  ) {
    return _MD5_Final(
      md,
      c,
    );
  }

  late final _MD5_FinalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<MD5_CTX>)>>('MD5_Final');
  late final _MD5_Final = _MD5_FinalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<MD5_CTX>)>();

  ffi.Pointer<ffi.Uint8> MD5(
    ffi.Pointer<ffi.Uint8> d,
    int n,
    ffi.Pointer<ffi.Uint8> md,
  ) {
    return _MD5(
      d,
      n,
      md,
    );
  }

  late final _MD5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>, size_t, ffi.Pointer<ffi.Uint8>)>>('MD5');
  late final _MD5 = _MD5Ptr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>)>();

  void MD5_Transform(
    ffi.Pointer<MD5_CTX> c,
    ffi.Pointer<ffi.Uint8> b,
  ) {
    return _MD5_Transform(
      c,
      b,
    );
  }

  late final _MD5_TransformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<MD5_CTX>, ffi.Pointer<ffi.Uint8>)>>('MD5_Transform');
  late final _MD5_Transform = _MD5_TransformPtr.asFunction<
      void Function(ffi.Pointer<MD5_CTX>, ffi.Pointer<ffi.Uint8>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> ___tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('__tzname');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get __tzname => ___tzname.value;

  set __tzname(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      ___tzname.value = value;

  late final ffi.Pointer<ffi.Int32> ___daylight =
      _lookup<ffi.Int32>('__daylight');

  int get __daylight => ___daylight.value;

  set __daylight(int value) => ___daylight.value = value;

  late final ffi.Pointer<ffi.Int64> ___timezone =
      _lookup<ffi.Int64>('__timezone');

  int get __timezone => ___timezone.value;

  set __timezone(int value) => ___timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) => _tzname.value = value;

  late final ffi.Pointer<ffi.Int32> _daylight = _lookup<ffi.Int32>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  late final ffi.Pointer<ffi.Int64> _timezone = _lookup<ffi.Int64>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  late final ffi.Pointer<ffi.Int32> _sys_nerr = _lookup<ffi.Int32>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _sys_errlist.value = value;

  /// CRYPTO_memcmp returns zero iff the |len| bytes at |a| and |b| are equal.
  /// It takes an amount of time dependent on |len|, but independent of the
  /// contents of |a| and |b|. Unlike memcmp, it cannot be used to put elements
  /// into a defined order as the return value when a != b is undefined, other
  /// than to be non-zero.
  int CRYPTO_memcmp(
    ffi.Pointer<ffi.Void> in_a,
    ffi.Pointer<ffi.Void> in_b,
    int len,
  ) {
    return _CRYPTO_memcmp(
      in_a,
      in_b,
      len,
    );
  }

  late final _CRYPTO_memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              size_t)>>('CRYPTO_memcmp');
  late final _CRYPTO_memcmp = _CRYPTO_memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();
}

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> __val;
}

class imaxdiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class max_align_t extends ffi.Opaque {}

class MD5state_st extends ffi.Struct {
  @ffi.Uint32()
  external int A;

  @ffi.Uint32()
  external int B;

  @ffi.Uint32()
  external int C;

  @ffi.Uint32()
  external int D;

  @ffi.Uint32()
  external int Nl;

  @ffi.Uint32()
  external int Nh;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint32> data;

  @ffi.Uint32()
  external int num;
}

typedef MD5_CTX = MD5state_st;
typedef size_t = ffi.Uint64;

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint64> __val;
}

class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Int64;
typedef __suseconds_t = ffi.Int64;

class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Int64;

class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Int64;

class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int32()
  external int __lock;

  @ffi.Uint32()
  external int __count;

  @ffi.Int32()
  external int __owner;

  @ffi.Uint32()
  external int __nusers;

  @ffi.Int32()
  external int __kind;

  @ffi.Int16()
  external int __spins;

  @ffi.Int16()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.Uint32()
  external int __readers;

  @ffi.Uint32()
  external int __writers;

  @ffi.Uint32()
  external int __wrphase_futex;

  @ffi.Uint32()
  external int __writers_futex;

  @ffi.Uint32()
  external int __pad3;

  @ffi.Uint32()
  external int __pad4;

  @ffi.Int32()
  external int __cur_writer;

  @ffi.Int32()
  external int __shared;

  @ffi.Int8()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Uint8> __pad1;

  @ffi.Uint64()
  external int __pad2;

  @ffi.Uint32()
  external int __flags;
}

class __pthread_cond_s extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_size;

  @ffi.Uint32()
  external int __g1_orig_size;

  @ffi.Uint32()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_signals;
}

class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int32()
  external int rand_type;

  @ffi.Int32()
  external int rand_deg;

  @ffi.Int32()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __old_x;

  @ffi.Uint16()
  external int __c;

  @ffi.Uint16()
  external int __init;

  @ffi.Uint64()
  external int __a;
}

class tm extends ffi.Struct {
  @ffi.Int32()
  external int tm_sec;

  @ffi.Int32()
  external int tm_min;

  @ffi.Int32()
  external int tm_hour;

  @ffi.Int32()
  external int tm_mday;

  @ffi.Int32()
  external int tm_mon;

  @ffi.Int32()
  external int tm_year;

  @ffi.Int32()
  external int tm_wday;

  @ffi.Int32()
  external int tm_yday;

  @ffi.Int32()
  external int tm_isdst;

  @ffi.Int64()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Int8> tm_zone;
}

class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

class sigevent extends ffi.Opaque {}

class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.Uint16> __ctype_b;

  external ffi.Pointer<ffi.Int32> __ctype_tolower;

  external ffi.Pointer<ffi.Int32> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Int8>> __names;
}

class __locale_data extends ffi.Opaque {}

class __mbstate_t extends ffi.Struct {
  @ffi.Int32()
  external int __count;

  external UnnamedUnion1 __value;
}

class UnnamedUnion1 extends ffi.Union {
  @ffi.Uint32()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __wchb;
}

class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off_t = ffi.Int64;

class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off64_t = ffi.Int64;

class _IO_FILE extends ffi.Struct {
  @ffi.Int32()
  external int _flags;

  external ffi.Pointer<ffi.Int8> _IO_read_ptr;

  external ffi.Pointer<ffi.Int8> _IO_read_end;

  external ffi.Pointer<ffi.Int8> _IO_read_base;

  external ffi.Pointer<ffi.Int8> _IO_write_base;

  external ffi.Pointer<ffi.Int8> _IO_write_ptr;

  external ffi.Pointer<ffi.Int8> _IO_write_end;

  external ffi.Pointer<ffi.Int8> _IO_buf_base;

  external ffi.Pointer<ffi.Int8> _IO_buf_end;

  external ffi.Pointer<ffi.Int8> _IO_save_base;

  external ffi.Pointer<ffi.Int8> _IO_backup_base;

  external ffi.Pointer<ffi.Int8> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int32()
  external int _fileno;

  @ffi.Int32()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.Uint16()
  external int _cur_column;

  @ffi.Int8()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Int8> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @size_t()
  external int __pad5;

  @ffi.Int32()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Int8> _unused2;
}

class _IO_marker extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;

class _IO_codecvt extends ffi.Opaque {}

class _IO_wide_data extends ffi.Opaque {}

typedef FILE = _IO_FILE;

class stack_st extends ffi.Opaque {}

class stack_st_OPENSSL_STRING extends ffi.Opaque {}

class stack_st_OPENSSL_CSTRING extends ffi.Opaque {}

class stack_st_OPENSSL_BLOCK extends ffi.Opaque {}

class asn1_string_st extends ffi.Opaque {}

class asn1_object_st extends ffi.Opaque {}

class ASN1_ITEM_st extends ffi.Opaque {}

class asn1_pctx_st extends ffi.Opaque {}

class asn1_sctx_st extends ffi.Opaque {}

class dane_st extends ffi.Opaque {}

class bio_st extends ffi.Opaque {}

class bignum_st extends ffi.Opaque {}

class bignum_ctx extends ffi.Opaque {}

class bn_blinding_st extends ffi.Opaque {}

class bn_mont_ctx_st extends ffi.Opaque {}

class bn_recp_ctx_st extends ffi.Opaque {}

class bn_gencb_st extends ffi.Opaque {}

class buf_mem_st extends ffi.Opaque {}

class evp_cipher_st extends ffi.Opaque {}

class evp_cipher_ctx_st extends ffi.Opaque {}

class evp_md_st extends ffi.Opaque {}

class evp_md_ctx_st extends ffi.Opaque {}

class evp_pkey_st extends ffi.Opaque {}

class evp_pkey_asn1_method_st extends ffi.Opaque {}

class evp_pkey_method_st extends ffi.Opaque {}

class evp_pkey_ctx_st extends ffi.Opaque {}

class evp_Encode_Ctx_st extends ffi.Opaque {}

class hmac_ctx_st extends ffi.Opaque {}

class dh_st extends ffi.Opaque {}

class dh_method extends ffi.Opaque {}

class dsa_st extends ffi.Opaque {}

class dsa_method extends ffi.Opaque {}

class rsa_st extends ffi.Opaque {}

class rsa_meth_st extends ffi.Opaque {}

class rsa_pss_params_st extends ffi.Opaque {}

class ec_key_st extends ffi.Opaque {}

class ec_key_method_st extends ffi.Opaque {}

class rand_meth_st extends ffi.Opaque {}

class rand_drbg_st extends ffi.Opaque {}

class ssl_dane_st extends ffi.Opaque {}

class x509_st extends ffi.Opaque {}

class X509_algor_st extends ffi.Opaque {}

class X509_crl_st extends ffi.Opaque {}

class x509_crl_method_st extends ffi.Opaque {}

class x509_revoked_st extends ffi.Opaque {}

class X509_name_st extends ffi.Opaque {}

class X509_pubkey_st extends ffi.Opaque {}

class x509_store_st extends ffi.Opaque {}

class x509_store_ctx_st extends ffi.Opaque {}

class x509_object_st extends ffi.Opaque {}

class x509_lookup_st extends ffi.Opaque {}

class x509_lookup_method_st extends ffi.Opaque {}

class X509_VERIFY_PARAM_st extends ffi.Opaque {}

class x509_sig_info_st extends ffi.Opaque {}

class pkcs8_priv_key_info_st extends ffi.Opaque {}

class v3_ext_ctx extends ffi.Opaque {}

class conf_st extends ffi.Opaque {}

class ossl_init_settings_st extends ffi.Opaque {}

class ui_st extends ffi.Opaque {}

class ui_method_st extends ffi.Opaque {}

class engine_st extends ffi.Opaque {}

class ssl_st extends ffi.Opaque {}

class ssl_ctx_st extends ffi.Opaque {}

class comp_ctx_st extends ffi.Opaque {}

class comp_method_st extends ffi.Opaque {}

class X509_POLICY_NODE_st extends ffi.Opaque {}

class X509_POLICY_LEVEL_st extends ffi.Opaque {}

class X509_POLICY_TREE_st extends ffi.Opaque {}

class X509_POLICY_CACHE_st extends ffi.Opaque {}

class AUTHORITY_KEYID_st extends ffi.Opaque {}

class DIST_POINT_st extends ffi.Opaque {}

class ISSUING_DIST_POINT_st extends ffi.Opaque {}

class NAME_CONSTRAINTS_st extends ffi.Opaque {}

class crypto_ex_data_st extends ffi.Struct {
  external ffi.Pointer<stack_st_void> sk;
}

class stack_st_void extends ffi.Opaque {}

class ocsp_req_ctx_st extends ffi.Opaque {}

class ocsp_response_st extends ffi.Opaque {}

class ocsp_responder_id_st extends ffi.Opaque {}

class sct_st extends ffi.Opaque {}

class sct_ctx_st extends ffi.Opaque {}

class ctlog_st extends ffi.Opaque {}

class ctlog_store_st extends ffi.Opaque {}

class ct_policy_eval_ctx_st extends ffi.Opaque {}

class ossl_store_info_st extends ffi.Opaque {}

class ossl_store_search_st extends ffi.Opaque {}

/// Old type for allocating dynamic locks. No longer used. Use the new thread
/// API instead.
class CRYPTO_dynlock extends ffi.Struct {
  @ffi.Int32()
  external int dummy;
}

/// This structure is no longer used
class crypto_threadid_st extends ffi.Struct {
  @ffi.Int32()
  external int dummy;
}

class sched_param extends ffi.Struct {
  @ffi.Int32()
  external int sched_priority;
}

class cpu_set_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__cpu_mask> __bits;
}

typedef __cpu_mask = ffi.Uint64;

class _pthread_cleanup_buffer extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  @ffi.Int32()
  external int __canceltype;

  external ffi.Pointer<_pthread_cleanup_buffer> __prev;
}

class __pthread_unwind_buf_t extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<UnnamedStruct1> __cancel_jmp_buf;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> __pad;
}

class UnnamedStruct1 extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int64> __cancel_jmp_buf;

  @ffi.Int32()
  external int __mask_was_saved;
}

class __pthread_cleanup_frame extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __cancel_routine;

  external ffi.Pointer<ffi.Void> __cancel_arg;

  @ffi.Int32()
  external int __do_it;

  @ffi.Int32()
  external int __cancel_type;
}

class __jmp_buf_tag extends ffi.Opaque {}

const int PTHREAD_CREATE_JOINABLE = 0;

const int PTHREAD_CREATE_DETACHED = 1;

const int PTHREAD_MUTEX_TIMED_NP = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP = 3;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_RECURSIVE = 1;

const int PTHREAD_MUTEX_ERRORCHECK = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_STALLED = 0;

const int PTHREAD_MUTEX_STALLED_NP = 0;

const int PTHREAD_MUTEX_ROBUST = 1;

const int PTHREAD_MUTEX_ROBUST_NP = 1;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP = 0;

const int PTHREAD_INHERIT_SCHED = 0;

const int PTHREAD_EXPLICIT_SCHED = 1;

const int PTHREAD_SCOPE_SYSTEM = 0;

const int PTHREAD_SCOPE_PROCESS = 1;

const int PTHREAD_PROCESS_PRIVATE = 0;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_CANCEL_ENABLE = 0;

const int PTHREAD_CANCEL_DISABLE = 1;

const int PTHREAD_CANCEL_DEFERRED = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 1;

const int OPENSSL_VERSION_NUMBER = 269488239;

const String OPENSSL_VERSION_TEXT = 'OpenSSL 1.1.1f  31 Mar 2020';

const String SHLIB_VERSION_HISTORY = '';

const String SHLIB_VERSION_NUMBER = '1.1';

const String OPENSSL_FILE = 'temp_for_macros.hpp';

const int OPENSSL_LINE = 33;

const int OPENSSL_MIN_API = 0;

const int OPENSSL_API_COMPAT = 0;

const int OSSL_SSIZE_MAX = 9223372036854775807;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 31;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LONG_DOUBLE_USES_FLOAT128 = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int _STDINT_H = 1;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int NULL = 0;

const int MD5_CBLOCK = 64;

const int MD5_LBLOCK = 16;

const int MD5_DIGEST_LENGTH = 16;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __ENUM_IDTYPE_T = 1;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const String __FD_ZERO_STOS = 'stosq';

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;

const int _TIME_H = 1;

const int _BITS_TIME_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __struct_tm_defined = 1;

const int __itimerspec_defined = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int TIME_UTC = 1;

const int _STDIO_H = 1;

const int __GNUC_VA_LIST = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int _LIBC_LIMITS_H_ = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int PTHREAD_STACK_MIN = 16384;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int SSIZE_MAX = 9223372036854775807;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int SCHAR_MAX = 127;

const int SHRT_MAX = 32767;

const int INT_MAX = 2147483647;

const int LONG_MAX = 9223372036854775807;

const int SCHAR_MIN = -128;

const int SHRT_MIN = -32768;

const int INT_MIN = -2147483648;

const int LONG_MIN = -9223372036854775808;

const int UCHAR_MAX = 255;

const int USHRT_MAX = 65535;

const int UINT_MAX = 4294967295;

const int ULONG_MAX = -1;

const int CHAR_BIT = 8;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int CRYPTO_F_CMAC_CTX_NEW = 120;

const int CRYPTO_F_CRYPTO_DUP_EX_DATA = 110;

const int CRYPTO_F_CRYPTO_FREE_EX_DATA = 111;

const int CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX = 100;

const int CRYPTO_F_CRYPTO_MEMDUP = 115;

const int CRYPTO_F_CRYPTO_NEW_EX_DATA = 112;

const int CRYPTO_F_CRYPTO_OCB128_COPY_CTX = 121;

const int CRYPTO_F_CRYPTO_OCB128_INIT = 122;

const int CRYPTO_F_CRYPTO_SET_EX_DATA = 102;

const int CRYPTO_F_FIPS_MODE_SET = 109;

const int CRYPTO_F_GET_AND_LOCK = 113;

const int CRYPTO_F_OPENSSL_ATEXIT = 114;

const int CRYPTO_F_OPENSSL_BUF2HEXSTR = 117;

const int CRYPTO_F_OPENSSL_FOPEN = 119;

const int CRYPTO_F_OPENSSL_HEXSTR2BUF = 118;

const int CRYPTO_F_OPENSSL_INIT_CRYPTO = 116;

const int CRYPTO_F_OPENSSL_LH_NEW = 126;

const int CRYPTO_F_OPENSSL_SK_DEEP_COPY = 127;

const int CRYPTO_F_OPENSSL_SK_DUP = 128;

const int CRYPTO_F_PKEY_HMAC_INIT = 123;

const int CRYPTO_F_PKEY_POLY1305_INIT = 124;

const int CRYPTO_F_PKEY_SIPHASH_INIT = 125;

const int CRYPTO_F_SK_RESERVE = 129;

const int CRYPTO_R_FIPS_MODE_NOT_SUPPORTED = 101;

const int CRYPTO_R_ILLEGAL_HEX_DIGIT = 102;

const int CRYPTO_R_ODD_NUMBER_OF_DIGITS = 103;

const int SSLEAY_VERSION_NUMBER = 269488239;

const int SSLEAY_VERSION = 0;

const int SSLEAY_CFLAGS = 1;

const int SSLEAY_BUILT_ON = 2;

const int SSLEAY_PLATFORM = 3;

const int SSLEAY_DIR = 4;

const int CRYPTO_MEM_CHECK_OFF = 0;

const int CRYPTO_MEM_CHECK_ON = 1;

const int CRYPTO_MEM_CHECK_ENABLE = 2;

const int CRYPTO_MEM_CHECK_DISABLE = 3;

const int CRYPTO_EX_INDEX_SSL = 0;

const int CRYPTO_EX_INDEX_SSL_CTX = 1;

const int CRYPTO_EX_INDEX_SSL_SESSION = 2;

const int CRYPTO_EX_INDEX_X509 = 3;

const int CRYPTO_EX_INDEX_X509_STORE = 4;

const int CRYPTO_EX_INDEX_X509_STORE_CTX = 5;

const int CRYPTO_EX_INDEX_DH = 6;

const int CRYPTO_EX_INDEX_DSA = 7;

const int CRYPTO_EX_INDEX_EC_KEY = 8;

const int CRYPTO_EX_INDEX_RSA = 9;

const int CRYPTO_EX_INDEX_ENGINE = 10;

const int CRYPTO_EX_INDEX_UI = 11;

const int CRYPTO_EX_INDEX_BIO = 12;

const int CRYPTO_EX_INDEX_APP = 13;

const int CRYPTO_EX_INDEX_UI_METHOD = 14;

const int CRYPTO_EX_INDEX_DRBG = 15;

const int CRYPTO_EX_INDEX__COUNT = 16;

const int OPENSSL_VERSION = 0;

const int OPENSSL_CFLAGS = 1;

const int OPENSSL_BUILT_ON = 2;

const int OPENSSL_PLATFORM = 3;

const int OPENSSL_DIR = 4;

const int OPENSSL_ENGINES_DIR = 5;

const int CRYPTO_LOCK = 1;

const int CRYPTO_UNLOCK = 2;

const int CRYPTO_READ = 4;

const int CRYPTO_WRITE = 8;

const int OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS = 1;

const int OPENSSL_INIT_LOAD_CRYPTO_STRINGS = 2;

const int OPENSSL_INIT_ADD_ALL_CIPHERS = 4;

const int OPENSSL_INIT_ADD_ALL_DIGESTS = 8;

const int OPENSSL_INIT_NO_ADD_ALL_CIPHERS = 16;

const int OPENSSL_INIT_NO_ADD_ALL_DIGESTS = 32;

const int OPENSSL_INIT_LOAD_CONFIG = 64;

const int OPENSSL_INIT_NO_LOAD_CONFIG = 128;

const int OPENSSL_INIT_ASYNC = 256;

const int OPENSSL_INIT_ENGINE_RDRAND = 512;

const int OPENSSL_INIT_ENGINE_DYNAMIC = 1024;

const int OPENSSL_INIT_ENGINE_OPENSSL = 2048;

const int OPENSSL_INIT_ENGINE_CRYPTODEV = 4096;

const int OPENSSL_INIT_ENGINE_CAPI = 8192;

const int OPENSSL_INIT_ENGINE_PADLOCK = 16384;

const int OPENSSL_INIT_ENGINE_AFALG = 32768;

const int OPENSSL_INIT_ATFORK = 131072;

const int OPENSSL_INIT_NO_ATEXIT = 524288;

const int OPENSSL_INIT_ENGINE_ALL_BUILTIN = 30208;

const int _PTHREAD_H = 1;

const int _SCHED_H = 1;

const int _BITS_SCHED_H = 1;

const int SCHED_OTHER = 0;

const int SCHED_FIFO = 1;

const int SCHED_RR = 2;

const int _BITS_TYPES_STRUCT_SCHED_PARAM = 1;

const int _BITS_CPU_SET_H = 1;

const int __CPU_SETSIZE = 1024;

const int __NCPUBITS = 64;

const int _BITS_SETJMP_H = 1;

const int PTHREAD_CREATE_JOINABLE1 = 0;

const int PTHREAD_CREATE_DETACHED1 = 1;

const int PTHREAD_INHERIT_SCHED1 = 0;

const int PTHREAD_EXPLICIT_SCHED1 = 1;

const int PTHREAD_SCOPE_SYSTEM1 = 0;

const int PTHREAD_SCOPE_PROCESS1 = 1;

const int PTHREAD_PROCESS_PRIVATE1 = 0;

const int PTHREAD_PROCESS_SHARED1 = 1;

const int PTHREAD_CANCEL_ENABLE1 = 0;

const int PTHREAD_CANCEL_DISABLE1 = 1;

const int PTHREAD_CANCEL_DEFERRED1 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS1 = 1;

const int PTHREAD_ONCE_INIT = 0;

const int PTHREAD_BARRIER_SERIAL_THREAD = -1;

const int CRYPTO_ONCE_STATIC_INIT = 0;
